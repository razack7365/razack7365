# Extraire la 2 colonne
x=bd[,2]
x
library(caschrono)    #pour la modeliosation sarima
library(forecast)
library(tseries)
#presentation graphique de la serie
y=log(x)
plot(y)
plot(x)
adf.test(x)
#test d'autocorelation
pacf((x))
x=Seatbelts[,2]
y=log(x)
t=1:144
for (i in 1:12)
{
su=rep(0,times=12)
su[i]=1
s=rep(su,times=12)
assign(paste("s",i,sep=""),s)
}
reg=lm(y~t+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12-1)
summary(reg)
bd=Seatbelts
bd
#View(bd)
str(bd)
length(bd)
#On s'int?resse  au fichier Seatbelts contenu dans R. Nous noterons  x
#la s?rie de la  deuxi?me colonne du fichier Seatbelts.
# Extraire la 2 colonne
x=bd[,2]
x
library(caschrono)    #pour la modeliosation sarima
library(forecast)
library(tseries)
#presentation graphique de la serie
y=log(x)
plot(y)
plot(x)
adf.test(x)
#test d'autocorelation
pacf((x))
x=Seatbelts[,2]
t=1:144
for (i in 1:12)
{
su=rep(0,times=12)
su[i]=1
s=rep(su,times=12)
assign(paste("s",i,sep=""),s)
}
#Régression linéaire
y=log(x)
reg=lm(y~t+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12-1)
t=1:192
for (i in 1:12)
{
su=rep(0,times=12)
su[i]=1
s=rep(su,times=12)
assign(paste("s",i,sep=""),s)
}
#Régression linéaire
y=log(x)
reg=lm(y~t+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12-1)
shiny::runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
library(readxl)
Production_Auto <- read_excel("T:/Générale des Assurances/Tableau de bord/app/GA/GA/Production Auto.xlsx")
View(Production_Auto)
runApp('T:/Générale des Assurances/Tableau de bord/Projet/forme3')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
unique(Production_Auto)
colnames(Production_Auto)
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp()
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet/forme3')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet/forme3')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet/forme3')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
shiny.info::info_value("test_info_value", position = "top right")
runApp('C:/Users/ARKABRE/Downloads/shinydashboard/tests-manual/box.R')
runApp('C:/Users/ARKABRE/Downloads/shinydashboard/tests-manual/bigDash.R')
runApp('C:/Users/ARKABRE/Downloads/shinydashboard/tests-manual/tabBox.R')
runApp('C:/Users/ARKABRE/Downloads/shinydashboard/tests-manual/updateTabItems.R')
#' @param subtitle Subtitle text.
#' @param icon An icon tag, created by \code{\link[shiny]{icon}}.
#' @param color A color for the box. Valid colors are listed in
#'   \link{validColors}.
#' @param href An optional URL to link to.
#'
#' @family boxes
#' @seealso \code{\link{box}} for usage examples.
#'
#' @export
valueBox <- function(value, subtitle, icon = NULL, color = "aqua", width = 4,
href = NULL)
{
validateColor(color)
if (!is.null(icon)) tagAssert(icon, type = "i")
boxContent <- div(class = paste0("small-box bg-", color),
div(class = "inner",
h3(value),
p(subtitle)
),
if (!is.null(icon)) div(class = "icon-large", icon)
)
if (!is.null(href))
boxContent <- a(href = href, boxContent)
div(class = if (!is.null(width)) paste0("col-sm-", width),
boxContent
)
}
#'   content, and the \code{color} argument for the background of the icon. If
#'   \code{TRUE}, use the \code{color} argument for the background of the
#'   content; the icon will use the same color with a slightly darkened
#'   background.
#' @param href An optional URL to link to.
#'
#' @family boxes
#' @seealso \code{\link{box}} for usage examples.
#'
#' @export
infoBox <- function(title, value = NULL, subtitle = NULL,
icon = shiny::icon("bar-chart"), color = "aqua", width = 4, href = NULL,
fill = FALSE) {
validateColor(color)
tagAssert(icon, type = "i")
colorClass <- paste0("bg-", color)
boxContent <- div(
class = "info-box",
class = if (fill) colorClass,
span(
class = "info-box-icon",
class = if (!fill) colorClass,
icon
),
div(class = "info-box-content",
span(class = "info-box-text", title),
if (!is.null(value)) span(class = "info-box-number", value),
if (!is.null(subtitle)) p(subtitle)
)
)
if (!is.null(href))
boxContent <- a(href = href, boxContent)
div(class = if (!is.null(width)) paste0("col-sm-", width),
boxContent
)
}
#' shinyApp(
#'   ui = dashboardPage(
#'     dashboardHeader(),
#'     dashboardSidebar(),
#'     body
#'   ),
#'   server = server
#' )
#' }
#' @export
box <- function(..., title = NULL, footer = NULL, status = NULL,
solidHeader = FALSE, background = NULL, width = 6,
height = NULL, collapsible = FALSE, collapsed = FALSE) {
boxClass <- "box"
if (solidHeader || !is.null(background)) {
boxClass <- paste(boxClass, "box-solid")
}
if (!is.null(status)) {
validateStatus(status)
boxClass <- paste0(boxClass, " box-", status)
}
if (collapsible && collapsed) {
boxClass <- paste(boxClass, "collapsed-box")
}
if (!is.null(background)) {
validateColor(background)
boxClass <- paste0(boxClass, " bg-", background)
}
style <- NULL
if (!is.null(height)) {
style <- paste0("height: ", validateCssUnit(height))
}
titleTag <- NULL
if (!is.null(title)) {
titleTag <- h3(class = "box-title", title)
}
collapseTag <- NULL
if (collapsible) {
buttonStatus <- status %OR% "default"
collapseIcon <- if (collapsed) "plus" else "minus"
collapseTag <- div(class = "box-tools pull-right",
tags$button(class = paste0("btn btn-box-tool"),
`data-widget` = "collapse",
shiny::icon(collapseIcon)
)
)
}
headerTag <- NULL
if (!is.null(titleTag) || !is.null(collapseTag)) {
headerTag <- div(class = "box-header",
titleTag,
collapseTag
)
}
div(class = if (!is.null(width)) paste0("col-sm-", width),
div(class = boxClass,
style = if (!is.null(style)) style,
headerTag,
div(class = "box-body", ...),
if (!is.null(footer)) div(class = "box-footer", footer)
)
)
}
#'   ui = dashboardPage(dashboardHeader(title = "tabBoxes"), dashboardSidebar(), body),
#'   server = function(input, output) {
#'     # The currently selected tab from the first box
#'     output$tabset1Selected <- renderText({
#'       input$tabset1
#'     })
#'   }
#' )
#' }
#' @export
tabBox <- function(..., id = NULL, selected = NULL, title = NULL,
width = 6, height = NULL, side = c("left", "right"))
{
side <- match.arg(side)
# The content is basically a tabsetPanel with some custom modifications
content <- shiny::tabsetPanel(..., id = id, selected = selected)
content$attribs$class <- "nav-tabs-custom"
# Set height
if (!is.null(height)) {
content <- tagAppendAttributes(content,
style = paste0("height: ", validateCssUnit(height))
)
}
# Move tabs to right side if needed
if (side == "right") {
content$children[[1]] <- tagAppendAttributes(content$children[[1]],
class = "pull-right"
)
}
# Add title
if (!is.null(title)) {
if (side == "left")
titleClass <- "pull-right"
else
titleClass <- "pull-left"
content$children[[1]] <- htmltools::tagAppendChild(content$children[[1]],
tags$li(class = paste("header", titleClass), title)
)
}
div(class = paste0("col-sm-", width), content)
}
install.packages("keycloakauth")
install.packages("keycloakR")
install.packages("keycloakR")
shiny::runApp('T:/Générale des Assurances/Tableau de bord/app/GA/r12')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/r12')
install.packages("shades")
install.packages("keycloakR")
help(package = "keycloakR")
install.packages(c("actuar", "broom", "bslib", "cachem", "classInt", "cli", "colorspace", "curl", "data.table", "dbplyr", "digest", "dplyr", "DT", "dtplyr", "e1071", "emmeans", "evaluate", "FactoMineR", "fansi", "fastmap", "fontawesome", "forcats", "forecast", "Formula", "fs", "gargle", "geometries", "ggplot2", "ggrepel", "gh", "haven", "highr", "Hmisc", "htmlwidgets", "httpuv", "httr", "igraph", "isoband", "knitr", "lubridate", "openxlsx", "pbkrtest", "purrr", "questionr", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "RSQLite", "sass", "shiny", "sourcetools", "stringi", "styler", "testthat", "tidyr", "tidyverse", "timechange", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "xts", "yaml"))
install.packages(c("actuar", "broom", "bslib", "cachem", "classInt", "cli", "colorspace", "curl", "data.table", "dbplyr", "digest", "dplyr", "DT", "dtplyr", "e1071", "emmeans", "evaluate", "FactoMineR", "fansi", "fastmap", "fontawesome", "forcats", "forecast", "Formula", "fs", "gargle", "geometries", "ggplot2", "ggrepel", "gh", "haven", "highr", "Hmisc", "htmlwidgets", "httpuv", "httr", "igraph", "isoband", "knitr", "lubridate", "openxlsx", "pbkrtest", "purrr", "questionr", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "RSQLite", "sass", "shiny", "sourcetools", "stringi", "styler", "testthat", "tidyr", "tidyverse", "timechange", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "xts", "yaml"))
install.packages(c("actuar", "broom", "bslib", "cachem", "classInt", "cli", "colorspace", "curl", "data.table", "dbplyr", "digest", "dplyr", "DT", "dtplyr", "e1071", "emmeans", "evaluate", "FactoMineR", "fansi", "fastmap", "fontawesome", "forcats", "forecast", "Formula", "fs", "gargle", "geometries", "ggplot2", "ggrepel", "gh", "haven", "highr", "Hmisc", "htmlwidgets", "httpuv", "httr", "igraph", "isoband", "knitr", "lubridate", "openxlsx", "pbkrtest", "purrr", "questionr", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "RSQLite", "sass", "shiny", "sourcetools", "stringi", "styler", "testthat", "tidyr", "tidyverse", "timechange", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "xts", "yaml"))
install.packages(c("actuar", "broom", "bslib", "cachem", "classInt", "cli", "colorspace", "curl", "data.table", "dbplyr", "digest", "dplyr", "DT", "dtplyr", "e1071", "emmeans", "evaluate", "FactoMineR", "fansi", "fastmap", "fontawesome", "forcats", "forecast", "Formula", "fs", "gargle", "geometries", "ggplot2", "ggrepel", "gh", "haven", "highr", "Hmisc", "htmlwidgets", "httpuv", "httr", "igraph", "isoband", "knitr", "lubridate", "openxlsx", "pbkrtest", "purrr", "questionr", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "RSQLite", "sass", "shiny", "sourcetools", "stringi", "styler", "testthat", "tidyr", "tidyverse", "timechange", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "xts", "yaml"))
install.packages(c("actuar", "broom", "bslib", "cachem", "classInt", "cli", "colorspace", "curl", "data.table", "dbplyr", "digest", "dplyr", "DT", "dtplyr", "e1071", "emmeans", "evaluate", "FactoMineR", "fansi", "fastmap", "fontawesome", "forcats", "forecast", "Formula", "fs", "gargle", "geometries", "ggplot2", "ggrepel", "gh", "haven", "highr", "Hmisc", "htmlwidgets", "httpuv", "httr", "igraph", "isoband", "knitr", "lubridate", "openxlsx", "pbkrtest", "purrr", "questionr", "Rcpp", "RcppArmadillo", "readr", "readxl", "rmarkdown", "RSQLite", "sass", "shiny", "sourcetools", "stringi", "styler", "testthat", "tidyr", "tidyverse", "timechange", "tinytex", "tseries", "utf8", "vctrs", "vroom", "xfun", "xts", "yaml"))
install.packages("cli")
install.packages("keycloakR")
# Redirect the user to the Keycloak login page
redirect_url <- keycloak_client$get_login_url(redirect_uri = request$URL)
install.packages("keycloakR", dependencies = TRUE)
R.version.string
R.version()
R.version.string
shiny::runApp('T:/Générale des Assurances/Tableau de bord/app/GA/GA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/AppGA')
version
library(installr)
install.packages("installr")
installr
install.packages("installr")
library(installr)
library(installr)
updater()
sessionInfo()
library(installr)
updater()
sessionInfo()
updater()
install.packages("learnr")
install.packages("keycloakR")
shiny::runApp('T:/Générale des Assurances/Tableau de bord/app/GA/r12')
/
sessionInfo()
updater()
updater()
updater(TRUE)
1
TRUE
install.packages(c("blob", "broom", "cli", "commonmark", "dbplyr", "dplyr", "dtplyr", "emmeans", "gapminder", "googledrive", "gtable", "Hmisc", "hms", "htmlwidgets", "leaflet", "lme4", "measurementProtocol", "modelr", "openssl", "pillar", "ps", "raster", "rlang", "scatterplot3d", "servr", "sf", "sfheaders", "styler", "terra", "testthat", "tibble", "vctrs", "wk", "XML"))
install.packages(c("cli", "commonmark"))
install.packages(c("cli", "htmltools"))
install.packages("keyclookR")
install.packages("dockerfiler")
shiny::runApp('T:/Générale des Assurances/Tableau de bord/app/GA/AppGA')
library(shiny); runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA/app - Copie.R')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
install.packages("shinyWidgets")
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
install.packages("withSpinner")
library(shinyWidgets)
detach("package:shinyWidgets", unload = TRUE)
library(shinyWidgets)
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
detach("package:shinyWidgets", unload = TRUE)
library(shinyWidgets)
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
# Chargement des differentes packages
install.packages("shinyWidgets")
install.packages("shinyWidgets")
shiny::runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
install.packages("waiter")
library(waiter)
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/vrndspinner')
install.packages("shinycssloaders")
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/vrndspinner')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
rsconnect::setAccountInfo(name='drdi', token='FA0675D837D49BF765FC9D283536E7E5', secret='5MFNeWsqH4g436taJ1BbCFGllCt8XcE/P4H1796b')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
shiny::runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/slider')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
shiny::runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
shiny::runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
shiny::runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA')
production <- read_excel("T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA/data/production.xlsx")
library(readxl)
production <- read_excel("T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA/data/production.xlsx")
# Chargement du package
library(RPostgreSQL)
# Connexion à la base de données
con <- dbConnect(PostgreSQL(),
user = "postgres",
password = 1234,
host = "localhost",
port = 5433,
dbname = "basepost")
###charger la base de données sous postgres
dbWriteTable(con,"production",production,row.names = FALSE,overwrite = TRUE)
shiny::runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA - Copie')
# Connexion à la base de données
con <- dbConnect(PostgreSQL(),
user = "postgres",
password = 1234,
host = "localhost",
port = 5433,
dbname = "basepost")
production <- dbGetQuery(con, "SELECT * FROM basepostvirtuel")
print(production)
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA - Copie')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/testslider')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/testslider')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA - Copie')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA - Copie')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA - Copie')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/testslider')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/testslider')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/testslider')
install.packages(c("shiny", "htmltools", "jsonlite", "magrittr", "rstudioapi", "sass", "shinyjs", "sourcetools"))
install.packages(c("shiny", "htmltools", "jsonlite", "magrittr", "rstudioapi", "sass", "shinyjs", "sourcetools"))
install.packages(c("shiny", "htmltools", "jsonlite", "magrittr", "rstudioapi", "sass", "shinyjs", "sourcetools"))
install.packages(c("shiny", "htmltools", "jsonlite", "magrittr", "rstudioapi", "sass", "shinyjs", "sourcetools"))
install.packages(c("shiny", "htmltools", "jsonlite", "magrittr", "rstudioapi", "sass", "shinyjs", "sourcetools"))
library(c("shiny", "htmltools", "jsonlite", "magrittr", "rstudioapi", "sass", "shinyjs", "sourcetools"))
install.packages( "sourcetools")
install.packages( "sass")
shiny::runApp('T:/Générale des Assurances/Tableau de bord/app/GA/testslider')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/testslider')
#library(sourcetoools)
install.packages("shinyWidgets")
install.packages("shinyWidgets")
install.packages(c("car", "checkmate", "cli", "dplyr", "ellipse", "FactoMineR", "fontawesome", "fs", "gargle", "ggplot2", "googleAuthR", "googlesheets4", "htmltools", "igraph", "interp", "labelled", "lme4", "markdown", "Matrix", "multcompView", "pak", "processx", "ps", "quantmod", "quantreg", "RcppArmadillo", "renv", "rlang", "rmarkdown", "RSQLite", "s2", "stars", "terra", "tinytex", "units", "vctrs", "vroom", "xfun", "xml2", "xts", "zip", "zoo"))
install.packages(c("car", "checkmate", "cli", "dplyr", "ellipse", "FactoMineR", "fontawesome", "fs", "gargle", "ggplot2", "googleAuthR", "googlesheets4", "htmltools", "igraph", "interp", "labelled", "lme4", "markdown", "Matrix", "multcompView", "pak", "processx", "ps", "quantmod", "quantreg", "RcppArmadillo", "renv", "rlang", "rmarkdown", "RSQLite", "s2", "stars", "terra", "tinytex", "units", "vctrs", "vroom", "xfun", "xml2", "xts", "zip", "zoo"))
install.packages(c("car", "checkmate", "cli", "dplyr", "ellipse", "FactoMineR", "fontawesome", "fs", "gargle", "ggplot2", "googleAuthR", "googlesheets4", "htmltools", "igraph", "interp", "labelled", "lme4", "markdown", "Matrix", "multcompView", "pak", "processx", "ps", "quantmod", "quantreg", "RcppArmadillo", "renv", "rlang", "rmarkdown", "RSQLite", "s2", "stars", "terra", "tinytex", "units", "vctrs", "vroom", "xfun", "xml2", "xts", "zip", "zoo"))
shiny::runApp('T:/Générale des Assurances/Tableau de bord/app/GA/testslider')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/testslider')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/testslider')
install.packages("shinwaiter")
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/testslider')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/testslider')
runApp('T:/Générale des Assurances/Tableau de bord/app/GA/testslider')
install.packages("shinwaiter")
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA - Copie')
shiny::runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA - Copie')
runApp('T:/Générale des Assurances/Tableau de bord/Projet dashbord GA/AppGA - Copie')
shiny::runApp()
